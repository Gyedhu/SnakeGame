{"version":3,"sources":["Components/Buttons/Buttons.jsx","Components/Path/Path.jsx","Components/GameBoard/GameBoard.jsx","action.js","constants.js","App.js","serviceWorker.js","reducer.js","index.js"],"names":["Buttons","this","props","play","turn","reset","currentDirection","className","onClick","React","Component","connect","state","apple","borderWidth","boardSize","head","numberOfPiece","size","snake","path","pathStyle","border","boxShadow","display","gridTemplateColumns","height","position","transform","width","style","animationIterationCount","backgroundColor","borderRadius","left","top","map","value","index","key","GameBoard","start","started","interval","setInterval","move","changeStart","checkCollision","eatten","generateApple","generateSnake","clearInterval","initialiize","handleKeys","onKeyEvent","length","currenDirection","gameOver","direction","dispatch","stared","type","payload","App","Boolean","window","location","hostname","match","initialState","percentage","store","createStore","action","Object","assign","i","y","x","Math","floor","random","newSnake","Array","splice","slice","round","min","innerWidth","innerHeight","fill","newHead","console","log","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.667d7983.chunk.js","sourcesContent":["import React from 'react';\nimport './Buttons.css';\n\nexport default class Buttons extends React.Component {\n    render() {\n        const { play, turn, reset, currentDirection } = this.props;\n        return (\n            <div className=\"buttons\">\n                <div className=\"playButtons\">\n                    <button onClick={play}><i className=\"fa fa-play\"></i></button>\n                    <button onClick={reset}><i className=\"fa fa-repeat\"></i></button>\n                </div>\n                <div className=\"controls\">\n                    <div></div>\n                    <button onClick={() => currentDirection !== \"down\" ? turn(\"up\") : turn(\"down\")}><i className=\"fa fa-arrow-up\"></i></button>\n                    <div></div>\n                    <button onClick={() => currentDirection !== \"right\" ? turn(\"left\") : turn(\"right\")}><i className=\"fa fa-arrow-left\"></i></button>\n                    <div></div>\n                    <button onClick={() => currentDirection !== \"left\" ? turn(\"right\") : turn(\"left\")}><i className=\"fa fa-arrow-right\"></i></button>\n                    <div></div>\n                    <button onClick={() => currentDirection !== \"up\" ? turn(\"down\") : turn(\"up\")}><i className=\"fa fa-arrow-down\"></i></button>\n                    <div></div>\n                </div>\n            </div >\n        );\n    }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport './Path.css' \n\nconst mapStateToProps = (state) => ({\n    apple: state.apple,\n    borderWidth: state.borderWidth,\n    boardSize: state.boardSize,\n    head: state.head,\n    numberOfPiece: state.numberOfPiece,\n    size: state.size,\n    snake: state.snake\n});\n\n\nconst Path = ({ apple, borderWidth, boardSize, head, numberOfPiece, path, size, snake }) => {\n    const pathStyle = {\n        border: `${borderWidth}px  solid #7777`,\n        boxShadow: \"0 0 5px 0 black\",\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${numberOfPiece}, 1fr)`,\n        height: boardSize,\n        position: \"relative\",\n        transform: \"traslateX(100%)\",\n        width: boardSize\n    }\n    return (\n        <div style={pathStyle}>\n            <div\n                style={{ \n                    animationIterationCount: \"infinite\",\n                    backgroundColor: \"red\",\n                    borderRadius: \"2px\",\n                    boxShadow: \"0 0 1px  black\",\n                    height: size,\n                    left: apple[0],\n                    position: \"absolute\",\n                    top: apple[1],\n                    width: size\n                }}\n            ></div>\n\n            {\n                snake.map((value, index) => <div key={index} style={{\n                    backgroundColor: value[0] === head[0] && value[1] === head[1] ? \"#555\" : \"#ccc\",\n                    boxShadow: \"0 0 1px black\",\n                    height: size,\n                    left: value[0],\n                    position: \"absolute\",\n                    top: value[1],\n                    width: size\n                }}> </div>)\n            }\n\n        </div >\n    );\n}\n\nexport default connect(mapStateToProps)(Path);\n","import React from 'react';\nimport Buttons from '../Buttons/Buttons';\nimport Path from '../Path/Path';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nimport './GameBoard.css';\nimport {\n    changeStart,\n    checkCollision,\n    generateApple,\n    generateSnake,\n    initialize,\n    move,\n    reset,\n    turn,\n} from '../../action';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = (state) => ({\n    currenDirection: state.direction,\n    eatten: state.eatten,\n    gameOver: state.gameOver,\n    snake: state.snake,\n    started: state.started\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    changeStart: (stared) => dispatch(changeStart(stared)),\n    checkCollision: () => dispatch(checkCollision()),\n    generateApple: () => dispatch(generateApple()),\n    generateSnake: () => dispatch(generateSnake()),\n    initialiize: () => dispatch(initialize()),\n    move: () => dispatch(move()),\n    reset: () => dispatch(reset()),\n    turn: (direction) => dispatch(turn(direction))\n})\n\nclass GameBoard extends React.Component {\n\n    componentDidMount() {\n        this.props.initialiize();\n        this.props.generateApple();\n        this.props.generateSnake();\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    start = () => {\n        if (!this.props.started) this.interval = setInterval(this.move, 200);\n        this.props.changeStart(true);\n    }\n\n    move = () => {\n        this.props.move();\n        this.props.checkCollision();\n        if (this.props.eatten) this.props.generateApple();\n        this.props.generateSnake();\n    }\n\n    reset = () => {\n        clearInterval(this.interval);\n        this.props.reset();\n        this.props.initialiize();\n        this.props.generateApple();\n        this.props.generateSnake();\n    }\n\n    render() {\n        return (\n            <div >\n                <KeyboardEventHandler handleKeys={[\"space\", \"up\", \"down\", \"left\", \"right\"]} onKeyEvent={(key) => {\n                    if (key === \"space\") this.start();\n                    else this.props.turn(key);\n                }} />\n                <div className=\"display\">\n                    <div className=\"headpart\"></div>\n                    <div className=\"score-board\">\n                        <span>Score : </span>\n                        <span>{(this.props.snake.length - 1) * 10}</span>\n                    </div>\n                    <Path />\n                    <Buttons play={this.start} turn={this.props.turn} reset={this.reset} currentDirection={this.props.currenDirection} />\n                    {this.props.gameOver && <div className=\"over-board\">\n                        <div>GameOver-:) </div>\n                        <div><sup>Scrore : </sup>{(this.props.snake.length - 1) * 10}</div>\n                    </div>}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GameBoard);\n","import {\n    CHANGE_START,\n    CHECK_COLLISION,\n    GENERATE_APPLE,\n    GENERATE_SNAKE,\n    INITIALIZE,\n    MOVE,\n    RESET,\n    TURN\n} from './constants';\n\n// Change Start\nexport const changeStart = (stated) => ({\n    type: CHANGE_START, \n    payload: stated\n})\n\n// Chack Collision\nexport const checkCollision = () => ({\n    type: CHECK_COLLISION\n});\n\n// Generate Apple\nexport const generateApple = () => ({\n    type: GENERATE_APPLE\n});\n\n// Generate Snake\nexport const generateSnake = () => ({\n    type: GENERATE_SNAKE\n});\n\n// Initialize\nexport const initialize = () => ({\n    type: INITIALIZE\n});\n\n// Move\nexport const move = () => ({\n    type: MOVE\n});\n\n// Reset\nexport const reset = () => ({\n    type: RESET\n});\n\n// Turn\nexport const turn = (direction) => ({\n    type: TURN,\n    payload: direction\n});\n\n\n","export const CHANGE_START = 'CHANGE_START';\nexport const CHECK_COLLISION = 'CHECK_COLLISION';\nexport const GENERATE_APPLE = 'GENERATE_APPLE'; \nexport const GENERATE_SNAKE = 'GENERATE_SNAKE';\nexport const INITIALIZE = 'INITIALIZE';\nexport const MOVE = 'MOVE';\nexport const RESET = 'RESET';\nexport const TURN = 'TURN';\n","import React from 'react';\nimport './App.css';\n\nimport GameBoard from './Components/GameBoard/GameBoard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GameBoard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n    CHANGE_START,\n    CHECK_COLLISION,\n    GENERATE_APPLE,\n    GENERATE_SNAKE,\n    INITIALIZE,\n    MOVE,\n    RESET,\n    TURN\n} from './constants';\n\nconst initialState = {\n    apple: [],\n    boardSize: 0,\n    borderWidth: 15,\n    direction: \"right\",\n    eatten: false,\n    gameOver: false,\n    head: [0, 0],\n    length: 1,\n    numberOfPiece: 20,\n    percentage: 80,\n    size: 0,\n    snake: [],\n    started: false\n}\n\nexport const reducer = (state = initialState, action = {}) => {\n    switch (action.type) {\n\n        // Change start\n        case CHANGE_START:\n            return Object.assign({}, state, {\n                started: action.payload\n            });\n\n        // Check Collision\n        case CHECK_COLLISION:\n            let gameOver = state.gameOver;\n            let length = state.length;\n            let direction = state.direction;\n\n            if (state.snake.length > 1) {\n                for (let i = 0; i < state.snake.length; i++) {\n                    if (state.snake[i][0] === state.head[0] && state.snake[i][1] === state.head[1]) {\n                        gameOver = true;\n                        direction = \"\";\n                    }\n                }\n            }\n\n            if (state.apple[0] === state.head[0] && state.apple[1] === state.head[1]) {\n                state.eatten = true;\n                length++;\n            }\n            return Object.assign({}, state, {\n                direction: direction,\n                gameOver: gameOver,\n                length: length\n            });\n\n        // Generate Apple\n        case GENERATE_APPLE:\n            // Declaring variables\n            let location = 0;\n            let y = 0;\n            let x = 0;\n\n            // Generating a random number beween 0 -and square of 'numberOfPiece' and assign the value to the variable 'location'\n            location = Math.floor(Math.random() * (state.numberOfPiece ** 2));\n            // Calculating the 'y' value by deviding 'location' by 'numberOfPiece'\n            y = Math.floor(location / state.numberOfPiece);\n\n            // Calculating the 'x' value by subtracting the 'y' * 'numberOfPiece'  from the 'location'\n            x = location - (y * state.numberOfPiece);\n\n            // Multipying the 'x' and 'y' value with 'size' the find the apple location\n            x *= state.size;\n            y *= state.size;\n\n            return Object.assign({}, state, {\n                apple: [x, y],\n                eatten: false,\n            });\n\n        // GenerateSnake\n        case GENERATE_SNAKE:\n            let newSnake = Array(state.length);\n\n            if (state.snake.length < state.length) {\n                newSnake.splice(0, newSnake.length - 1, ...state.snake.slice(0, state.snake.length));\n            } else {\n                newSnake.splice(0, newSnake.length - 1, ...state.snake.slice(1, state.snake.length))\n            }\n            newSnake[newSnake.length - 1] = state.head;\n            return Object.assign({}, state, {\n                snake: newSnake\n            });\n\n        // Initializing\n        case INITIALIZE:\n            // Declaring variables\n            let boardSize = 0;\n            let size = 0;\n\n            //  Calculating width and height of the board\n\n            // From total screen width and height finding smallest \n            // Calculating 80% of the the value got from the previous step\n            // Assing the result  to the 'boardSize'  variable\n            boardSize = Math.round((state.percentage / 100) * Math.min(window.innerWidth, window.innerHeight));\n\n            // Making the 'borderSize' variable devisible by the 'numberOfPiece' for avoiding getting floating point number in 'size'\n            boardSize += (state.numberOfPiece - (boardSize % state.numberOfPiece));\n\n            // Calculating 'size' by dividing 'boardSize'  by  'numberOfPeice'\n            size = boardSize / state.numberOfPiece;\n\n            // Adding the 'boderWidth' to the 'boardSize' \n            boardSize += state.borderWidth * 2;\n\n            return Object.assign({}, state, {\n                boardSize: boardSize,\n                head: [size, size],\n                path: Array(state.numberOfPiece ** 2).fill(0),\n                size: size\n            })\n\n        // Move\n        case MOVE:\n            let newHead = state.head.slice();\n            if (!state.gameOver) {\n                if (state.direction === \"right\" && newHead[0] + state.size < state.size * state.numberOfPiece) {\n                    newHead[0] += state.size;\n                } else if (state.direction === \"left\" && newHead[0] > 0) {\n                    newHead[0] -= state.size;\n                } else if (state.direction === \"down\" && newHead[1] + state.size < state.size * state.numberOfPiece) {\n                    newHead[1] += state.size;\n                } else if (state.direction === \"up\" && newHead[1] > 0) {\n                    newHead[1] -= state.size;\n                } else {\n                    console.log(\"nothing\");\n                }\n            }\n            return Object.assign({}, state, {\n                head: newHead\n            });\n\n        // Reset\n        case RESET:\n            return Object.assign({}, state, {\n                apple: [],\n                direction: \"right\",\n                eatten: false,\n                gameOver: false,\n                head: [state.size, state.size],\n                length: 1,\n                snake: [],\n                started: false\n            });\n\n        // Turn\n        case TURN:\n            return Object.assign({}, state, {\n                direction: action.payload\n            });\n\n        default:\n            return state;\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { reducer } from './reducer';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}