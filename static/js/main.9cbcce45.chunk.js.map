{"version":3,"sources":["Components/Buttons/Buttons.jsx","Components/Path/Path.jsx","Components/GameBoard/GameBoard.jsx","action.js","constants.js","App.js","serviceWorker.js","reducer.js","index.js"],"names":["Buttons","this","props","play","turnLeft","turnRight","reset","className","onClick","React","Component","connect","state","apple","borderWidth","boardSize","head","numberOfPiece","size","snake","path","pathStyle","border","boxShadow","display","gridTemplateColumns","height","position","transform","width","style","backgroundColor","borderRadius","left","top","map","value","index","key","transitionName","GameBoard","start","interval","setInterval","move","checkCollision","eatten","generateApple","generateSnake","initialize","initialiize","clearInterval","length","handleKeys","onKeyEvent","console","log","gameOver","dispatch","type","App","Boolean","window","location","hostname","match","initialState","direction","percentage","store","createStore","action","i","Object","assign","y","x","Math","floor","random","newSnake","Array","splice","slice","round","min","innerWidth","innerHeight","fill","newHead","newDir","newDirection","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9cbcce45.chunk.js","sourcesContent":["import React from 'react';\nimport './Buttons.css';\n\nexport default class Buttons extends React.Component {\n    render() {\n        const { play, turnLeft, turnRight, reset } = this.props;\n        return (\n            <div className=\"buttons\">\n                <div className=\"playButtons\">\n                    <button onClick={play}><i className=\"fa fa-play\"></i></button>\n                    <button onClick={reset}><i className=\"fa fa-repeat\"></i></button>\n                </div>\n                <div className=\"controls\">\n                    <button onClick={turnLeft}><i className=\"fa fa-arrow-circle-left\"></i></button>\n                    <button onClick={turnRight}><i className=\"fa fa-arrow-circle-right\"></i></button>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport './Path.css'\n\nconst mapStateToProps = (state) => ({\n    apple: state.apple,\n    borderWidth: state.borderWidth,\n    boardSize: state.boardSize,\n    head: state.head,\n    numberOfPiece: state.numberOfPiece,\n    size: state.size,\n    snake: state.snake\n});\n\n\nconst Path = ({ apple, borderWidth, boardSize, head, numberOfPiece, path, size, snake }) => {\n    const pathStyle = {\n        border: `${borderWidth}px  solid #ccc`,\n        boxShadow: \"0 0 5px 0 black\",\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${numberOfPiece}, 1fr)`,\n        height: boardSize,\n        position: \"relative\",\n        transform: \"traslateX(100%)\",\n        width: boardSize\n    }\n    return (\n        <div style={pathStyle}>\n            <div\n                style={{\n                    backgroundColor: \"red\",\n                    borderRadius: \"10%\",\n                    boxShadow: \"0 0 2px black\",\n                    height: size,\n                    left: apple[0],\n                    position: \"absolute\",\n                    top: apple[1],\n                    width: size\n                }}\n            ></div>\n\n            {snake.map((value, index) => <div key={index} style={{\n                backgroundColor: value[0] === head[0] && value[1] === head[1] ? \"#555\" : \"#ccc\",\n                borderRadius: \"20%\",\n                boxShadow: \"0 0 2px black\",\n                height: size,\n                left: value[0],\n                position: \"absolute\",\n                top: value[1],\n                transitionName: \"right, left\",\n                width: size\n            }}> </div>)}\n\n        </div>\n    );\n}\n\nexport default connect(mapStateToProps)(Path);\n","import React from 'react';\nimport Buttons from '../Buttons/Buttons';\nimport Path from '../Path/Path';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nimport './GameBoard.css';\nimport {\n    checkCollision,\n    generateApple,\n    generateSnake,\n    initialize,\n    move,\n    reset,\n    turnLeft,\n    turnRight\n} from '../../action';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = (state) => ({\n    eatten: state.eatten,\n    gameOver: state.gameOver,\n    snake: state.snake\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    checkCollision: () => dispatch(checkCollision()),\n    generateApple: () => dispatch(generateApple()),\n    generateSnake: () => dispatch(generateSnake()),\n    initialiize: () => dispatch(initialize()),\n    move: () => dispatch(move()),\n    reset: () => dispatch(reset()),\n    turnLeft: () => dispatch(turnLeft()),\n    turnRight: () => dispatch(turnRight())\n})\n\nclass GameBoard extends React.Component {\n\n    componentDidMount() {\n        this.props.initialiize();\n        this.props.generateApple();\n        this.props.generateSnake();\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    start = () => {\n        this.interval = setInterval(this.move, 100);\n    }\n\n    move = () => {\n        this.props.move();\n        this.props.checkCollision();\n        if (this.props.eatten) {\n            this.props.generateApple();\n        }\n        this.props.generateSnake();\n    }\n\n    initialize = () => {\n        this.props.initialiize();\n    }\n\n    reset = () => {\n        clearInterval(this.interval);\n        this.props.reset();\n        this.props.initialiize();\n        this.props.generateApple();\n        this.props.generateSnake();\n    }\n\n    render() {\n        return (\n            <div >\n                <div className=\"header\" >Snake</div>\n                <div className=\"score-board\">\n                    <span>Score : </span>\n                    <span>{(this.props.snake.length - 1) * 10}</span>\n                </div>\n                <KeyboardEventHandler handleKeys={[\"space\", \"left\", \"right\"]} onKeyEvent={(key) => {\n                    switch (key) {\n                        case 'left':\n                            this.props.turnLeft();\n                            break;\n                        case 'right':\n                            this.props.turnRight();\n                            break;\n                        case 'space':\n                            this.start();\n                            break;\n                        default:\n                            console.log(\"Nothing\");\n                    }\n                }} />\n                <Path />\n                <Buttons play={this.start} turnLeft={this.props.turnLeft} turnRight={this.props.turnRight} reset={this.reset} />\n                {this.props.gameOver && <div className=\"over-board\">GameOver</div>}\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GameBoard);\n","import {\n    CHECK_COLLISION,\n    GENERATE_APPLE,\n    GENERATE_SNAKE,\n    INITIALIZE,\n    MOVE,\n    TURN_RIGHT,\n    TURN_LEFT,\n    RESET\n} from './constants';\n\n// Chack Collision\nexport const checkCollision = () => ({\n    type: CHECK_COLLISION\n});\n\n// Generate Apple\nexport const generateApple = () => ({\n    type: GENERATE_APPLE\n});\n\n// Generate Snake\nexport const generateSnake = () => ({\n    type: GENERATE_SNAKE\n});\n\n// Initialize\nexport const initialize = () => ({\n    type: INITIALIZE\n});\n\n// Move\nexport const move = () => ({\n    type: MOVE\n});\n\n// Reset\nexport const reset = () => ({\n    type: RESET\n});\n\n// Turn Left\nexport const turnLeft = () => ({\n    type: TURN_LEFT\n});\n\n// Turn Right\nexport const turnRight = () => ({\n    type: TURN_RIGHT\n});","export const CHECK_COLLISION = 'CHECK_COLLISION';\nexport const GENERATE_APPLE = 'GENERATE_APPLE'; \nexport const GENERATE_SNAKE = 'GENERATE_SNAKE';\nexport const INITIALIZE = 'INITIALIZE';\nexport const MOVE = 'MOVE';\nexport const RESET = 'RESET';\nexport const TURN_LEFT = 'TURN_LEFT';\nexport const TURN_RIGHT = 'TURN_RIGHT';","import React from 'react';\nimport './App.css';\n\nimport GameBoard from './Components/GameBoard/GameBoard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GameBoard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n    GENERATE_APPLE,\n    GENERATE_SNAKE,\n    INITIALIZE,\n    MOVE,\n    TURN_LEFT,\n    TURN_RIGHT,\n    CHECK_COLLISION,\n    RESET\n} from './constants';\n\nconst initialState = {\n    apple: [],\n    boardSize: 0,\n    borderWidth: 10,\n    direction: \"right\",\n    eatten: false,\n    gameOver: false,\n    head: [0, 0],\n    length: 1,\n    numberOfPiece: 20,\n    percentage: 80,\n    size: 0,\n    snake: [],\n}\n\nexport const reducer = (state = initialState, action = {}) => {\n    switch (action.type) {\n\n        // Check Collision\n        case CHECK_COLLISION:\n            let gameOver = state.gameOver;\n            let length = state.length;\n            let direction = state.direction;\n\n            if (state.snake.length > 1) {\n                for (let i = 0; i < state.snake.length; i++) {\n                    if (state.snake[i][0] === state.head[0] && state.snake[i][1] === state.head[1]) {\n                        gameOver = true;\n                        direction = \"\";\n                    }\n                }\n            }\n\n            if (state.apple[0] === state.head[0] && state.apple[1] === state.head[1]) {\n                state.eatten = true;\n                length++;\n            }\n            return Object.assign({}, state, {\n                direction: direction,\n                gameOver: gameOver,\n                length: length\n            });\n\n        // Generate Apple\n        case GENERATE_APPLE:\n            // Declaring variables\n            let location = 0;\n            let y = 0;\n            let x = 0;\n\n            // Generating a random number beween 0 -and square of 'numberOfPiece' and assign the value to the variable 'location'\n            location = Math.floor(Math.random() * (state.numberOfPiece ** 2));\n            // Calculating the 'y' value by deviding 'location' by 'numberOfPiece'\n            y = Math.floor(location / state.numberOfPiece);\n\n            // Calculating the 'x' value by subtracting the 'y' * 'numberOfPiece'  from the 'location'\n            x = location - (y * state.numberOfPiece);\n\n            // Multipying the 'x' and 'y' value with 'size' the find the apple location\n            x *= state.size;\n            y *= state.size;\n\n            return Object.assign({}, state, {\n                apple: [x, y],\n                eatten: false,\n            });\n\n        // GenerateSnake\n        case GENERATE_SNAKE:\n            let newSnake = Array(state.length);\n\n            if (state.snake.length < state.length) {\n                newSnake.splice(0, newSnake.length - 1, ...state.snake.slice(0, state.snake.length));\n            } else {\n                newSnake.splice(0, newSnake.length - 1, ...state.snake.slice(1, state.snake.length))\n            }\n            newSnake[newSnake.length - 1] = state.head;\n            return Object.assign({}, state, {\n                snake: newSnake\n            });\n\n        // Initializing\n        case INITIALIZE:\n            // Declaring variables\n            let boardSize = 0;\n            let size = 0;\n\n            //  Calculating width and height of the board\n\n            // From total screen width and height finding smallest \n            // Calculating 80% of the the value got from the previous step\n            // Assing the result  to the 'boardSize'  variable\n            boardSize = Math.round((state.percentage / 100) * Math.min(window.innerWidth, window.innerHeight));\n\n            // Making the 'borderSize' variable devisible by the 'numberOfPiece' for avoiding getting floating point number in 'size'\n            boardSize += (state.numberOfPiece - (boardSize % state.numberOfPiece));\n\n            // Calculating 'size' by dividing 'boardSize'  by  'numberOfPeice'\n            size = boardSize / state.numberOfPiece;\n\n            // Adding the 'boderWidth' to the 'boardSize' \n            boardSize += state.borderWidth * 2;\n\n            return Object.assign({}, state, {\n                boardSize: boardSize,\n                head: [size, size],\n                path: Array(state.numberOfPiece ** 2).fill(0),\n                size: size\n            })\n\n        // Move\n        case MOVE:\n            let newHead = state.head.slice();\n\n            switch (state.direction) {\n                case \"right\":\n                    if (newHead[0] + state.size < state.size * state.numberOfPiece) {\n                        newHead[0] += state.size;\n                    }\n                    break;\n                case \"left\":\n                    if (newHead[0] > 0) {\n                        newHead[0] -= state.size;\n                    }\n                    break;\n                case \"down\":\n                    if (newHead[1] + state.size < state.size * state.numberOfPiece) {\n                        newHead[1] += state.size;\n                    }\n                    break;\n                case \"up\":\n                    if (newHead[1] > 0) {\n                        newHead[1] -= state.size;\n                    }\n                    break;\n                default:\n                    newHead[1] += 0;\n                    newHead[0] += 0;\n            }\n            return Object.assign({}, state, {\n                head: newHead\n            });\n\n        // Reset\n        case RESET:\n            return Object.assign({}, state, {\n                apple: [],\n                direction: \"right\",\n                eatten: false,\n                gameOver: false,\n                head: [state.size, state.size],\n                length: 1,\n                snake: []\n            });\n\n        // Turn Left\n        case TURN_LEFT:\n            let newDir;\n            switch (state.direction) {\n                case \"right\":\n                    newDir = \"up\";\n                    break;\n                case \"left\":\n                    newDir = \"down\";\n                    break;\n                case \"down\":\n                    newDir = \"right\";\n                    break;\n                case \"up\":\n                    newDir = \"left\";\n                    break;\n                default:\n                    newDir = \"\";\n            }\n            return Object.assign({}, state, {\n                direction: newDir\n            });\n\n        // Turn Right\n        case TURN_RIGHT:\n            let newDirection;\n            switch (state.direction) {\n                case \"right\":\n                    newDirection = \"down\";\n                    break;\n                case \"left\":\n                    newDirection = \"up\";\n                    break;\n                case \"down\":\n                    newDirection = \"left\";\n                    break;\n                case \"up\":\n                    newDirection = \"right\";\n                    break;\n                default:\n                    newDirection = \"\";\n            }\n\n            return Object.assign({}, state, {\n                direction: newDirection\n            });\n\n\n        default:\n            return state;\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { reducer } from './reducer';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}